"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Coverage = function Coverage(data, name) {
  _classCallCheck(this, Coverage);

  _defineProperty(this, "getMedia", function (count) {
    var pos = 0;
    var text = this.content[count].text;
    var ranges = this.content[count].ranges;

    while (pos < this.content[count].text.length) {
      if (text.indexOf('@media', pos) == -1) break;
      var rangeUp = {};
      var rangeDown = {};
      pos = rangeUp.start = text.indexOf('@media', pos);
      pos = rangeUp.end = text.indexOf('{', pos) + 1;
      ranges.push(rangeUp);
      var regexp = /[}|\s|]}/g;
      regexp.lastIndex = pos;
      var posIndex = regexp.exec(text);
      pos = rangeDown.start = posIndex.index;
      pos = rangeDown.end = text.indexOf('}', pos) + 1;
      ranges.push(rangeDown);
    }

    pos = 0;

    while (pos < this.content[count].text.length) {
      if (text.indexOf('@font-face', pos) == -1) break;
      pos = ranges.start = text.indexOf('@font-face', pos);
      pos = ranges.end = text.indexOf('}', pos) + 1;
      ranges.push(ranges);
    }

    sortRanges(ranges);

    function sortRanges(arr) {
      arr.sort(function (a, b) {
        return a.start > b.start ? 1 : -1;
      });
    }
  });

  _defineProperty(this, "getCss", function () {
    for (var i = 0, len = this.content.length; i < len; i++) {
      var row = this.content[i];
      var ext = row.url.split('.').pop();

      if (ext !== 'css') {
        continue;
      }

      this.getMedia(i);
      this.showUseCSS(row);
    }
  });

  _defineProperty(this, "showUseCSS", function (row) {
    var textarea = document.createElement('textarea');
    var p = document.createElement('p');
    p.innerHTML = row.url;

    for (var i = 0, len = row.ranges.length; i < len; i++) {
      var offset = row.ranges[i];
      textarea.innerHTML += row.text.substr(offset.start, offset.end - offset.start) + "\n";
    } // найти пустые медиа и удалить
    // подхватить используемые правила @keyframes


    document.body.append(p);
    document.body.append(textarea);
  });

  this.content = data;
  this.name = name;
  this.getCss();
};

var res = new Coverage(data, false);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiQ292ZXJhZ2UiLCJkYXRhIiwibmFtZSIsImNvdW50IiwicG9zIiwidGV4dCIsImNvbnRlbnQiLCJyYW5nZXMiLCJsZW5ndGgiLCJpbmRleE9mIiwicmFuZ2VVcCIsInJhbmdlRG93biIsInN0YXJ0IiwiZW5kIiwicHVzaCIsInJlZ2V4cCIsImxhc3RJbmRleCIsInBvc0luZGV4IiwiZXhlYyIsImluZGV4Iiwic29ydFJhbmdlcyIsImFyciIsInNvcnQiLCJhIiwiYiIsImkiLCJsZW4iLCJyb3ciLCJleHQiLCJ1cmwiLCJzcGxpdCIsInBvcCIsImdldE1lZGlhIiwic2hvd1VzZUNTUyIsInRleHRhcmVhIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicCIsImlubmVySFRNTCIsIm9mZnNldCIsInN1YnN0ciIsImJvZHkiLCJhcHBlbmQiLCJnZXRDc3MiLCJyZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFBQSxRLEdBQ0Esa0JBQUFDLElBQUEsRUFBQUMsSUFBQSxFQUFBO0FBQUE7O0FBQUEsb0NBT0EsVUFBQUMsS0FBQSxFQUFBO0FBRUEsUUFBQUMsR0FBQSxHQUFBLENBQUE7QUFDQSxRQUFBQyxJQUFBLEdBQUEsS0FBQUMsT0FBQSxDQUFBSCxLQUFBLEVBQUFFLElBQUE7QUFDQSxRQUFBRSxNQUFBLEdBQUEsS0FBQUQsT0FBQSxDQUFBSCxLQUFBLEVBQUFJLE1BQUE7O0FBRUEsV0FBQUgsR0FBQSxHQUFBLEtBQUFFLE9BQUEsQ0FBQUgsS0FBQSxFQUFBRSxJQUFBLENBQUFHLE1BQUEsRUFBQTtBQUNBLFVBQUFILElBQUEsQ0FBQUksT0FBQSxDQUFBLFFBQUEsRUFBQUwsR0FBQSxLQUFBLENBQUEsQ0FBQSxFQUFBO0FBRUEsVUFBQU0sT0FBQSxHQUFBLEVBQUE7QUFDQSxVQUFBQyxTQUFBLEdBQUEsRUFBQTtBQUVBUCxNQUFBQSxHQUFBLEdBQUFNLE9BQUEsQ0FBQUUsS0FBQSxHQUFBUCxJQUFBLENBQUFJLE9BQUEs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Q0FBQWtCLENBQUEsQ0FBQTtBQUVBUyxNQUFBQSxRQUFBLENBQUFJLFNBQUEsSUFBQVgsR0FBQSxDQUFBdEIsSUFBQSxDQUFBbUMsTUFBQSxDQUFBRCxNQUFBLENBQUEzQixLQUFBLEVBQUEyQixNQUFBLENBQUExQixHQUFBLEdBQUEwQixNQUFBLENBQUEzQixLQUFBLElBQUEsSUFBQTtBQUVBLEtBVkEsQ0FZQTtBQUNBOzs7QUFFQXVCLElBQUFBLFFBQUEsQ0FBQU0sSUFBQSxDQUFBQyxNQUFBLENBQUFMLENBQUE7QUFDQUYsSUFBQUEsUUFBQSxDQUFBTSxJQUFBLENBQUFDLE1BQUEsQ0FBQVIsUUFBQTtBQUNBLEdBM0ZBOztBQUNBLE9BQUE1QixPQUFBLEdBQUFMLElBQUE7QUFDQSxPQUFBQyxJQUFBLEdBQUFBLElBQUE7QUFFQSxPQUFBeUMsTUFBQTtBQUNBLEM7O0FBeUZBLElBQUFDLEdBQUEsR0FBQSxJQUFBNUMsUUFBQSxDQUFBQyxJQUFBLEVBQUEsS0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDb3ZlcmFnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgbmFtZSkge1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBkYXRhO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgICAgIHRoaXMuZ2V0Q3NzKCk7XG4gICAgfVxuXG4gICAgZ2V0TWVkaWEgPSBmdW5jdGlvbiAoY291bnQpIHtcblxuICAgICAgICBsZXQgcG9zID0gMDtcbiAgICAgICAgbGV0IHRleHQgPSB0aGlzLmNvbnRlbnRbY291bnRdLnRleHQ7XG4gICAgICAgIGxldCByYW5nZXMgPSB0aGlzLmNvbnRlbnRbY291bnRdLnJhbmdlcztcblxuICAgICAgICB3aGlsZSAocG9zIDwgdGhpcy5jb250ZW50W2NvdW50XS50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRleHQuaW5kZXhPZignQG1lZGlhJywgcG9zKSA9PSAtMSkgYnJlYWs7XG5cbiAgICAgICAgICAgIGxldCByYW5nZVVwID0ge307XG4gICAgICAgICAgICBsZXQgcmFuZ2VEb3duID0ge307XG5cbiAgICAgICAgICAgIHBvcyA9IHJhbmdlVXAuc3RhcnQgPSB0ZXh0LmluZGV4T2YoJ0BtZWRpYScsIHBvcyk7XG4gICAgICAgICAgICBwb3MgPSByYW5nZVVwLmVuZCA9IHRleHQuaW5kZXhPZigneycsIHBvcykgKyAxO1xuXG4gICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZVVwKTtcblxuICAgICAgICAgICAgbGV0IHJlZ2V4cCA9IC9bfXxcXHN8XX0vZztcbiAgICAgICAgICAgIHJlZ2V4cC5sYXN0SW5kZXggPSBwb3M7XG5cbiAgICAgICAgICAgIGxldCBwb3NJbmRleCA9IHJlZ2V4cC5leGVjKHRleHQpO1xuXG4gICAgICAgICAgICBwb3MgPSByYW5nZURvd24uc3RhcnQgPSBwb3NJbmRleC5pbmRleDtcbiAgICAgICAgICAgIHBvcyA9IHJhbmdlRG93bi5lbmQgPSB0ZXh0LmluZGV4T2YoJ30nLCBwb3MpICsgMTtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHJhbmdlRG93bik7XG5cbiAgICAgICAgfVxuICAgICAgICBwb3MgPSAwO1xuICAgICAgICB3aGlsZSAocG9zIDwgdGhpcy5jb250ZW50W2NvdW50XS50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRleHQuaW5kZXhPZignQGZvbnQtZmFjZScsIHBvcykgPT0gLTEpIGJyZWFrO1xuXG5cbiAgICAgICAgICAgIHBvcyA9IHJhbmdlcy5zdGFydCA9IHRleHQuaW5kZXhPZignQGZvbnQtZmFjZScsIHBvcyk7XG4gICAgICAgICAgICBwb3MgPSByYW5nZXMuZW5kID0gdGV4dC5pbmRleE9mKCd9JywgcG9zKSArIDE7XG5cbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHJhbmdlcyk7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgc29ydFJhbmdlcyhyYW5nZXMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNvcnRSYW5nZXMoYXJyKSB7XG4gICAgICAgICAgICBhcnIuc29ydCgoYSwgYikgPT4gYS5zdGFydCA+IGIuc3RhcnQgPyAxIDogLTEpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG5cblxuICAgIGdldENzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY29udGVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5jb250ZW50W2ldO1xuICAgICAgICAgICAgdmFyIGV4dCA9IHJvdy51cmwuc3BsaXQoJy4nKS5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKGV4dCAhPT0gJ2NzcycpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5nZXRNZWRpYShpKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd1VzZUNTUyhyb3cpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHNob3dVc2VDU1MgPSBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIGxldCB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBwLmlubmVySFRNTCA9IHJvdy51cmw7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdy5yYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSByb3cucmFuZ2VzW2ldO1xuXG4gICAgICAgICAgICB0ZXh0YXJlYS5pbm5lckhUTUwgKz0gcm93LnRleHQuc3Vic3RyKG9mZnNldC5zdGFydCwgb2Zmc2V0LmVuZCAtIG9mZnNldC5zdGFydCkgKyBcIlxcblwiO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyDQvdCw0LnRgtC4INC/0YPRgdGC0YvQtSDQvNC10LTQuNCwINC4INGD0LTQsNC70LjRgtGMXG4gICAgICAgIC8vINC/0L7QtNGF0LLQsNGC0LjRgtGMINC40YHQv9C+0LvRjNC30YPQtdC80YvQtSDQv9GA0LDQstC40LvQsCBAa2V5ZnJhbWVzXG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQocClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGV4dGFyZWEpO1xuICAgIH1cbn1cblxubGV0IHJlcyA9IG5ldyBDb3ZlcmFnZShkYXRhLCBmYWxzZSlcbiJdfQ==
