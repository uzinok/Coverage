"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Coverage = function Coverage(data, name) {
  _classCallCheck(this, Coverage);

  _defineProperty(this, "getMedia", function (count) {
    // добавить медиа выражения в row.ranges
    // где они заканчиваются
    // отсортировать row.ranges
    var pos = 0;
    var text = this.content[count].text;
    var ranges = this.content[count].ranges;

    while (pos < this.content[count].text.length) {
      if (text.indexOf('@media', pos) == -1) break;
      var rangeUp = {};
      var rangeDown = {};
      pos = rangeUp.start = text.indexOf('@media', pos);
      pos = rangeUp.end = text.indexOf('{', pos) + 1;
      ranges.push(rangeUp);
      var regexp = /}|s+\n|}/g;
      regexp.lastIndex = pos;
      var posIndex = regexp.exec(text);
      pos = rangeDown.start = posIndex.index;
      pos = rangeDown.end = text.indexOf('}', pos) + 1;
      ranges.push(rangeDown);
    }

    sortByAge(ranges);

    function sortByAge(arr) {
      arr.sort(function (a, b) {
        return a.start > b.start ? 1 : -1;
      });
    }
  });

  _defineProperty(this, "getCss", function () {
    for (var i = 0, len = this.content.length; i < len; i++) {
      var row = this.content[i];
      var ext = row.url.split('.').pop();

      if (ext !== 'css') {
        continue;
      }

      this.getMedia(i);
      this.showUseCSS(row);
    }
  });

  _defineProperty(this, "showUseCSS", function (row) {
    var textarea = document.createElement('textarea');
    var p = document.createElement('p');
    p.innerHTML = row.url;

    for (var i = 0, len = row.ranges.length; i < len; i++) {
      var offset = row.ranges[i];
      textarea.innerHTML += row.text.substr(offset.start, offset.end - offset.start) + "\n";
    } // найти пустые медиа и удалить
    // подхватить используемые правила @keyframes


    document.body.append(p);
    document.body.append(textarea);
  });

  this.content = data;
  this.name = name;
  this.getCss();
};

var res = new Coverage(data, false);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiQ292ZXJhZ2UiLCJkYXRhIiwibmFtZSIsImNvdW50IiwicG9zIiwidGV4dCIsImNvbnRlbnQiLCJyYW5nZXMiLCJsZW5ndGgiLCJpbmRleE9mIiwicmFuZ2VVcCIsInJhbmdlRG93biIsInN0YXJ0IiwiZW5kIiwicHVzaCIsInJlZ2V4cCIsImxhc3RJbmRleCIsInBvc0luZGV4IiwiZXhlYyIsImluZGV4Iiwic29ydEJ5QWdlIiwiYXJyIiwic29ydCIsImEiLCJiIiwiaSIsImxlbiIsInJvdyIsImV4dCIsInVybCIsInNwbGl0IiwicG9wIiwiZ2V0TWVkaWEiLCJzaG93VXNlQ1NTIiwidGV4dGFyZWEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJwIiwiaW5uZXJIVE1MIiwib2Zmc2V0Iiwic3Vic3RyIiwiYm9keSIsImFwcGVuZCIsImdldENzcyIsInJlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQUFBLFEsR0FDQSxrQkFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUE7QUFBQTs7QUFBQSxvQ0FPQSxVQUFBQyxLQUFBLEVBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxRQUFBQyxHQUFBLEdBQUEsQ0FBQTtBQUNBLFFBQUFDLElBQUEsR0FBQSxLQUFBQyxPQUFBLENBQUFILEtBQUEsRUFBQUUsSUFBQTtBQUNBLFFBQUFFLE1BQUEsR0FBQSxLQUFBRCxPQUFBLENBQUFILEtBQUEsRUFBQUksTUFBQTs7QUFFQSxXQUFBSCxHQUFBLEdBQUEsS0FBQUUsT0FBQSxDQUFBSCxLQUFBLEVBQUFFLElBQUEsQ0FBQUcsTUFBQSxFQUFBO0FBQ0EsVUFBQUgsSUFBQSxDQUFBSSxPQUFBLENBQUEsUUFBQSxFQUFBTCxHQUFBLEtBQUEsQ0FBQSxDQUFBLEVBQUE7QUFFQSxVQUFBTSxPQUFBLEdBQUEsRUFBQTtBQUNBLFVBQUFDLFNBQUEsR0FBQSxFQUFBO0FBRUFQLE1BQUFBLEdBQUEsR0FBQU0sT0FBQSxDQUFBRSxLQUFBLEdBQUFQLElB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QUErRUEsSUFBQUMsR0FBQSxHQUFBLElBQUE1QyxRQUFBLENBQUFDLElBQUEsRUFBQSxLQUFBLENBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENvdmVyYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGRhdGE7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cbiAgICAgICAgdGhpcy5nZXRDc3MoKTtcbiAgICB9XG5cbiAgICBnZXRNZWRpYSA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgICAvLyDQtNC+0LHQsNCy0LjRgtGMINC80LXQtNC40LAg0LLRi9GA0LDQttC10L3QuNGPINCyIHJvdy5yYW5nZXNcbiAgICAgICAgLy8g0LPQtNC1INC+0L3QuCDQt9Cw0LrQsNC90YfQuNCy0LDRjtGC0YHRj1xuICAgICAgICAvLyDQvtGC0YHQvtGA0YLQuNGA0L7QstCw0YLRjCByb3cucmFuZ2VzXG5cbiAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5jb250ZW50W2NvdW50XS50ZXh0O1xuICAgICAgICBsZXQgcmFuZ2VzID0gdGhpcy5jb250ZW50W2NvdW50XS5yYW5nZXM7XG5cbiAgICAgICAgd2hpbGUgKHBvcyA8IHRoaXMuY29udGVudFtjb3VudF0udGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmluZGV4T2YoJ0BtZWRpYScsIHBvcykgPT0gLTEpIGJyZWFrO1xuXG4gICAgICAgICAgICBsZXQgcmFuZ2VVcCA9IHt9O1xuICAgICAgICAgICAgbGV0IHJhbmdlRG93biA9IHt9O1xuXG4gICAgICAgICAgICBwb3MgPSByYW5nZVVwLnN0YXJ0ID0gdGV4dC5pbmRleE9mKCdAbWVkaWEnLCBwb3MpO1xuICAgICAgICAgICAgcG9zID0gcmFuZ2VVcC5lbmQgPSB0ZXh0LmluZGV4T2YoJ3snLCBwb3MpICsgMTtcblxuICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2VVcCk7XG5cbiAgICAgICAgICAgIGxldCByZWdleHAgPSAvfXxzK1xcbnx9L2c7XG4gICAgICAgICAgICByZWdleHAubGFzdEluZGV4ID0gcG9zO1xuXG4gICAgICAgICAgICBsZXQgcG9zSW5kZXggPSByZWdleHAuZXhlYyh0ZXh0KTtcblxuICAgICAgICAgICAgcG9zID0gcmFuZ2VEb3duLnN0YXJ0ID0gcG9zSW5kZXguaW5kZXg7XG4gICAgICAgICAgICBwb3MgPSByYW5nZURvd24uZW5kID0gdGV4dC5pbmRleE9mKCd9JywgcG9zKSArIDE7XG4gICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZURvd24pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBzb3J0QnlBZ2UocmFuZ2VzKTtcblxuICAgICAgICBmdW5jdGlvbiBzb3J0QnlBZ2UoYXJyKSB7XG4gICAgICAgICAgICBhcnIuc29ydCgoYSwgYikgPT4gYS5zdGFydCA+IGIuc3RhcnQgPyAxIDogLTEpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG5cblxuICAgIGdldENzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY29udGVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5jb250ZW50W2ldO1xuICAgICAgICAgICAgdmFyIGV4dCA9IHJvdy51cmwuc3BsaXQoJy4nKS5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKGV4dCAhPT0gJ2NzcycpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5nZXRNZWRpYShpKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd1VzZUNTUyhyb3cpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93VXNlQ1NTID0gZnVuY3Rpb24gKHJvdykge1xuICAgICAgICBsZXQgdGV4dGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICBsZXQgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgcC5pbm5lckhUTUwgPSByb3cudXJsO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByb3cucmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gcm93LnJhbmdlc1tpXTtcblxuICAgICAgICAgICAgdGV4dGFyZWEuaW5uZXJIVE1MICs9IHJvdy50ZXh0LnN1YnN0cihvZmZzZXQuc3RhcnQsIG9mZnNldC5lbmQgLSBvZmZzZXQuc3RhcnQpICsgXCJcXG5cIjtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8g0L3QsNC50YLQuCDQv9GD0YHRgtGL0LUg0LzQtdC00LjQsCDQuCDRg9C00LDQu9C40YLRjFxuICAgICAgICAvLyDQv9C+0LTRhdCy0LDRgtC40YLRjCDQuNGB0L/QvtC70YzQt9GD0LXQvNGL0LUg0L/RgNCw0LLQuNC70LAgQGtleWZyYW1lc1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHApXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRleHRhcmVhKTtcbiAgICB9XG59XG5cbmxldCByZXMgPSBuZXcgQ292ZXJhZ2UoZGF0YSwgZmFsc2UpXG4iXX0=
