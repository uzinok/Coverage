"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Coverage = function Coverage(data, name) {
  _classCallCheck(this, Coverage);

  _defineProperty(this, "getMedia", function (count) {
    var pos = 0;
    var text = this.content[count].text;
    var ranges = this.content[count].ranges;

    while (pos < this.content[count].text.length) {
      if (text.indexOf('@media', pos) == -1) break;
      var rangeUp = {};
      var rangeDown = {};
      pos = rangeUp.start = text.indexOf('@media', pos);
      pos = rangeUp.end = text.indexOf('{', pos) + 1;
      ranges.push(rangeUp);
      var regexp = /[}|\s|]}/g;
      regexp.lastIndex = pos;
      var posIndex = regexp.exec(text);
      pos = rangeDown.start = posIndex.index;
      pos = rangeDown.end = text.indexOf('}', pos) + 1;
      ranges.push(rangeDown);
    }

    console.log('pos');
    pos = 0;

    while (pos < this.content[count].text.length) {
      if (text.indexOf('@font-face', pos) == -1) break;
      pos = ranges.start = text.indexOf('@font-face', pos);
      console.log(pos);
      pos = ranges.end = text.indexOf('}', pos) + 1;
      console.log(pos);
      ranges.push(ranges);
    }

    sortByAge(ranges);

    function sortByAge(arr) {
      arr.sort(function (a, b) {
        return a.start > b.start ? 1 : -1;
      });
    }
  });

  _defineProperty(this, "getCss", function () {
    for (var i = 0, len = this.content.length; i < len; i++) {
      var row = this.content[i];
      var ext = row.url.split('.').pop();

      if (ext !== 'css') {
        continue;
      }

      this.getMedia(i);
      this.showUseCSS(row);
    }
  });

  _defineProperty(this, "showUseCSS", function (row) {
    var textarea = document.createElement('textarea');
    var p = document.createElement('p');
    p.innerHTML = row.url;

    for (var i = 0, len = row.ranges.length; i < len; i++) {
      var offset = row.ranges[i];
      textarea.innerHTML += row.text.substr(offset.start, offset.end - offset.start) + "\n";
    } // найти пустые медиа и удалить
    // подхватить используемые правила @keyframes


    document.body.append(p);
    document.body.append(textarea);
  });

  this.content = data;
  this.name = name;
  this.getCss();
};

var res = new Coverage(data, false);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiQ292ZXJhZ2UiLCJkYXRhIiwibmFtZSIsImNvdW50IiwicG9zIiwidGV4dCIsImNvbnRlbnQiLCJyYW5nZXMiLCJsZW5ndGgiLCJpbmRleE9mIiwicmFuZ2VVcCIsInJhbmdlRG93biIsInN0YXJ0IiwiZW5kIiwicHVzaCIsInJlZ2V4cCIsImxhc3RJbmRleCIsInBvc0luZGV4IiwiZXhlYyIsImluZGV4IiwiY29uc29sZSIsImxvZyIsInNvcnRCeUFnZSIsImFyciIsInNvcnQiLCJhIiwiYiIsImkiLCJsZW4iLCJyb3ciLCJleHQiLCJ1cmwiLCJzcGxpdCIsInBvcCIsImdldE1lZGlhIiwic2hvd1VzZUNTUyIsInRleHRhcmVhIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicCIsImlubmVySFRNTCIsIm9mZnNldCIsInN1YnN0ciIsImJvZHkiLCJhcHBlbmQiLCJnZXRDc3MiLCJyZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFBQSxRLEdBQ0Esa0JBQUFDLElBQUEsRUFBQUMsSUFBQSxFQUFBO0FBQUE7O0FBQUEsb0NBT0EsVUFBQUMsS0FBQSxFQUFBO0FBRUEsUUFBQUMsR0FBQSxHQUFBLENBQUE7QUFDQSxRQUFBQyxJQUFBLEdBQUEsS0FBQUMsT0FBQSxDQUFBSCxLQUFBLEVBQUFFLElBQUE7QUFDQSxRQUFBRSxNQUFBLEdBQUEsS0FBQUQsT0FBQSxDQUFBSCxLQUFBLEVBQUFJLE1BQUE7O0FBRUEsV0FBQUgsR0FBQSxHQUFBLEtBQUFFLE9BQUEsQ0FBQUgsS0FBQSxFQUFBRSxJQUFBLENBQUFHLE1BQUEsRUFBQTtBQUNBLFVBQUFILElBQUEsQ0FBQUksT0FBQSxDQUFBLFFBQUEsRUFBQUwsR0FBQSxLQUFBLENBQUEsQ0FBQSxFQUFBO0FBRUEsVUFBQU0sT0FBQSxHQUFBLEVBQUE7QUFDQSxVQUFBQyxTQUFBLEdBQUEsRUFBQTtBQUVBUCxNQUFBQSxHQUFBLEdBQUFNLE9BQUEsQ0FBQUUsS0FBQSxHQUFBUCxJ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QUEsQ0FBQSxFQUFBQyxHQUFBLEdBQUFDLEdBQUEsQ0FBQXRCLE1BQUEsQ0FBQUMsTUFBQSxFQUFBbUIsQ0FBQSxHQUFBQyxHQUFBLEVBQUFELENBQUEsRUFBQSxFQUFBO0FBQ0EsVUFBQWMsTUFBQSxHQUFBWixHQUFBLENBQUF0QixNQUFBLENBQUFvQixDQUFBLENBQUE7QUFFQVMsTUFBQUEsUUFBQSxDQUFBSSxTQUFBLElBQUFYLEdBQUEsQ0FBQXhCLElBQUEsQ0FBQXFDLE1BQUEsQ0FBQUQsTUFBQSxDQUFBN0IsS0FBQSxFQUFBNkIsTUFBQSxDQUFBNUIsR0FBQSxHQUFBNEIsTUFBQSxDQUFBN0IsS0FBQSxJQUFBLElBQUE7QUFFQSxLQVZBLENBWUE7QUFDQTs7O0FBRUF5QixJQUFBQSxRQUFBLENBQUFNLElBQUEsQ0FBQUMsTUFBQSxDQUFBTCxDQUFBO0FBQ0FGLElBQUFBLFFBQUEsQ0FBQU0sSUFBQSxDQUFBQyxNQUFBLENBQUFSLFFBQUE7QUFDQSxHQTlGQTs7QUFDQSxPQUFBOUIsT0FBQSxHQUFBTCxJQUFBO0FBQ0EsT0FBQUMsSUFBQSxHQUFBQSxJQUFBO0FBRUEsT0FBQTJDLE1BQUE7QUFDQSxDOztBQTRGQSxJQUFBQyxHQUFBLEdBQUEsSUFBQTlDLFFBQUEsQ0FBQUMsSUFBQSxFQUFBLEtBQUEsQ0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ292ZXJhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gZGF0YTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgICAgICB0aGlzLmdldENzcygpO1xuICAgIH1cblxuICAgIGdldE1lZGlhID0gZnVuY3Rpb24gKGNvdW50KSB7XG5cbiAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5jb250ZW50W2NvdW50XS50ZXh0O1xuICAgICAgICBsZXQgcmFuZ2VzID0gdGhpcy5jb250ZW50W2NvdW50XS5yYW5nZXM7XG5cbiAgICAgICAgd2hpbGUgKHBvcyA8IHRoaXMuY29udGVudFtjb3VudF0udGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmluZGV4T2YoJ0BtZWRpYScsIHBvcykgPT0gLTEpIGJyZWFrO1xuXG4gICAgICAgICAgICBsZXQgcmFuZ2VVcCA9IHt9O1xuICAgICAgICAgICAgbGV0IHJhbmdlRG93biA9IHt9O1xuXG4gICAgICAgICAgICBwb3MgPSByYW5nZVVwLnN0YXJ0ID0gdGV4dC5pbmRleE9mKCdAbWVkaWEnLCBwb3MpO1xuICAgICAgICAgICAgcG9zID0gcmFuZ2VVcC5lbmQgPSB0ZXh0LmluZGV4T2YoJ3snLCBwb3MpICsgMTtcblxuICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2VVcCk7XG5cbiAgICAgICAgICAgIGxldCByZWdleHAgPSAvW318XFxzfF19L2c7XG4gICAgICAgICAgICByZWdleHAubGFzdEluZGV4ID0gcG9zO1xuXG4gICAgICAgICAgICBsZXQgcG9zSW5kZXggPSByZWdleHAuZXhlYyh0ZXh0KTtcblxuICAgICAgICAgICAgcG9zID0gcmFuZ2VEb3duLnN0YXJ0ID0gcG9zSW5kZXguaW5kZXg7XG4gICAgICAgICAgICBwb3MgPSByYW5nZURvd24uZW5kID0gdGV4dC5pbmRleE9mKCd9JywgcG9zKSArIDE7XG4gICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZURvd24pO1xuXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ3BvcycpXG4gICAgICAgIHBvcyA9IDA7XG4gICAgICAgIHdoaWxlIChwb3MgPCB0aGlzLmNvbnRlbnRbY291bnRdLnRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5pbmRleE9mKCdAZm9udC1mYWNlJywgcG9zKSA9PSAtMSkgYnJlYWs7XG5cblxuICAgICAgICAgICAgcG9zID0gcmFuZ2VzLnN0YXJ0ID0gdGV4dC5pbmRleE9mKCdAZm9udC1mYWNlJywgcG9zKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvcylcbiAgICAgICAgICAgIHBvcyA9IHJhbmdlcy5lbmQgPSB0ZXh0LmluZGV4T2YoJ30nLCBwb3MpICsgMTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvcylcblxuICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2VzKTtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBzb3J0QnlBZ2UocmFuZ2VzKTtcblxuICAgICAgICBmdW5jdGlvbiBzb3J0QnlBZ2UoYXJyKSB7XG4gICAgICAgICAgICBhcnIuc29ydCgoYSwgYikgPT4gYS5zdGFydCA+IGIuc3RhcnQgPyAxIDogLTEpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG5cblxuICAgIGdldENzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY29udGVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5jb250ZW50W2ldO1xuICAgICAgICAgICAgdmFyIGV4dCA9IHJvdy51cmwuc3BsaXQoJy4nKS5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKGV4dCAhPT0gJ2NzcycpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5nZXRNZWRpYShpKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd1VzZUNTUyhyb3cpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHNob3dVc2VDU1MgPSBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIGxldCB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBwLmlubmVySFRNTCA9IHJvdy51cmw7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdy5yYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSByb3cucmFuZ2VzW2ldO1xuXG4gICAgICAgICAgICB0ZXh0YXJlYS5pbm5lckhUTUwgKz0gcm93LnRleHQuc3Vic3RyKG9mZnNldC5zdGFydCwgb2Zmc2V0LmVuZCAtIG9mZnNldC5zdGFydCkgKyBcIlxcblwiO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyDQvdCw0LnRgtC4INC/0YPRgdGC0YvQtSDQvNC10LTQuNCwINC4INGD0LTQsNC70LjRgtGMXG4gICAgICAgIC8vINC/0L7QtNGF0LLQsNGC0LjRgtGMINC40YHQv9C+0LvRjNC30YPQtdC80YvQtSDQv9GA0LDQstC40LvQsCBAa2V5ZnJhbWVzXG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQocClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGV4dGFyZWEpO1xuICAgIH1cbn1cblxubGV0IHJlcyA9IG5ldyBDb3ZlcmFnZShkYXRhLCBmYWxzZSlcbiJdfQ==
